name: Deploy to GitHub Pages

on:
  push:
    branches: [ main, prototype ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Test Backend API
  test-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Test backend API endpoints
        run: |
          cd backend
          python -c "
          from main import app
          import json
          
          print('Testing Flask app imports...')
          assert app is not None, 'Flask app failed to initialize'
          
          print('Testing Perfect Minimax agent...')
          from agents.perfect_agent import PerfectMinimaxAgent
          agent = PerfectMinimaxAgent()
          assert agent is not None, 'Agent failed to initialize'
          
          print('Testing game engine...')
          from core.tictactoe import TicTacToe
          game = TicTacToe()
          assert game is not None, 'Game engine failed to initialize'
          
          print('All backend tests passed!')
          "
      
      - name: Test Render.com backend connectivity
        run: |
          echo "Testing Render.com backend API..."
          HEALTH_RESPONSE=$(curl -s -w "\n%{http_code}" https://tictactoe-qlearning.onrender.com/api/health)
          HTTP_CODE=$(echo "$HEALTH_RESPONSE" | tail -n1)
          RESPONSE_BODY=$(echo "$HEALTH_RESPONSE" | head -n1)
          
          echo "HTTP Status: $HTTP_CODE"
          echo "Response: $RESPONSE_BODY"
          
          if [ "$HTTP_CODE" != "200" ]; then
            echo "Warning: Backend API returned status $HTTP_CODE"
            echo "Deployment will continue, but backend may need attention"
          else
            echo "Backend API is healthy!"
          fi

  # Build job
  build:
    runs-on: ubuntu-latest
    needs: test-backend
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload root directory (contains index.html)
          path: '.'

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      
      - name: Verify deployment
        run: |
          echo "GitHub Pages deployed!"
          echo "Frontend URL: https://xircons.github.io/tictactoe-qlearning/"
          echo "Backend URL: https://tictactoe-qlearning.onrender.com"
          echo "Game is ready to play!"
